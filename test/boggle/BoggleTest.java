package boggle;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;

import tree.LexicographicTree;

import static org.junit.jupiter.api.Assertions.*;

import java.util.Arrays;
import java.util.Set;
import java.util.TreeSet;

public class BoggleTest {
	private static final Set<String> EXPECTED_WORDS = new TreeSet<>(Arrays.asList(new String[] {"CES", "CESSE", "CESSENT", "CRESSON", "EGO", "ENCRE",
			"ENCRES", "ENGONCE", "ENGONCER", "ENGONCES", "ESSE", "GENS", "GENT", "GESSE", "GNOSE", "GOSSE", "NES", "NET", "NOS", "ONCE",
			"ONCES", "OSE", "OSENT", "PRE", "PRES", "PRESSE", "PRESSENT", "RESSENT", "SEC", "SECS", "SEN", "SENT", "SET", "SON",
			"SONGE", "SONGENT", "SONS", "TENSON", "TENSONS", "TES"}));
	private static final String GRID_LETTERS = "RHREYPCSWNSNTEGO";
	private static LexicographicTree dictionary = null;

	@BeforeAll
	private static void initTestDictionary() {
		System.out.print("Loading dictionary...");
		dictionary = new LexicographicTree("mots/dictionnaire_FR_avec_accents.txt");
		System.out.println(" done.");
	}
	
	@Test
	void wikipediaExample() {
		Boggle b = new Boggle(4, GRID_LETTERS, dictionary);
		assertNotNull(b);
		assertEquals(GRID_LETTERS, b.letters());
		assertEquals(EXPECTED_WORDS, b.solve());
		assertEquals(108, Boggle.score(b.solve()));
		assertTrue(b.contains("SONGENT"));
		assertFalse(b.contains("SONO"));
		assertTrue(b.contains("R"));
		assertTrue(b.contains("RH"));
		assertTrue(b.contains("RHPN"));
	}

	@Test
	void qMeansQuExample() {
		Boggle b = new Boggle(2, "QELS", dictionary);
		assertNotNull(b);
		assertEquals("QELS", b.letters());
		assertEquals(new TreeSet<>(Arrays.asList(new String[] {"LES", "QUE", "QUEL", "QUELS", "SEL"})), b.solve());
		assertEquals(6, Boggle.score(b.solve()));
		assertTrue(b.contains("QU"));
		assertFalse(b.contains("Q"));
	}
	
	@Test
	void argumentConstructorWithLettersError() {
		testFailWithLetter(-4, GRID_LETTERS, dictionary, "taille négatif passé");
		testFailWithLetter(0, GRID_LETTERS, dictionary, "taille zéro passé");
		testFailWithLetter(4, null, dictionary, "les lettres sont null");
		testFailWithLetter(4, "", dictionary, "les lettres sont vide");
		testFailWithLetter(4, " 		 \\n", dictionary, "les lettres sont juste des espaces blancs");
		testFailWithLetter(4, GRID_LETTERS, null, "dictonnaire est null");
	}
	
	@Test
	void argumentConstructorWithoutLettersError() {
		testFail(-4, dictionary, "taille négatif passé");
		testFail(0, dictionary, "taille zéro passé");
		testFail(4, null, "dictonnaire est null");
	}
	
	@Test
	void argumentContainsError() {
		Boggle b = new Boggle(4, GRID_LETTERS, dictionary);
		assertFalse(b.contains(null));
		assertFalse(b.contains(""));
		assertFalse(b.contains(" 		 \n"));
	}
	
	@Test
	void wikipediaExample2() {
		Boggle b = new Boggle(4, GRID_LETTERS, dictionary);
		assertTrue(b.contains("RHRESCPYWNSNOGET"));
		assertTrue(b.contains("RYWTENPHRCSGONSE"));
		assertTrue(b.contains("ERHRYPCSNSNWTEGO"));
		assertTrue(b.contains("TWYRHPNEGSCRESNO"));
		
	}
	
	@Test
	void createGraphWithRandomLetter() {
		Boggle b = new Boggle(4, "RHREYPCSWNSNTEGO",dictionary);
		assertEquals("R  H  R  E  \n"
				+ "Y  P  C  S  \n"
				+ "W  N  S  N  \n"
				+ "T  E  G  O  ", b.toString());
	}
	
	@Test
	public void containsCornersOfGrid() {
	    Boggle b = new Boggle(2, "ABAB", dictionary);
	    assertTrue(b.contains("AB"));
	    assertTrue(b.contains("ABA"));
	    assertTrue(b.contains("ABAB"));
	}
	
	@Test
	public void containsOneLetter() {
	    Boggle b = new Boggle(1, "A", dictionary);
	    assertTrue(b.contains("A"));
	}
	
	@Test
	public void containsDoesNotUseLetterTwice() {
	    Boggle b = new Boggle(2, "ABAB", dictionary);
	    assertFalse(b.contains("ABBB"));
	    assertFalse(b.contains("ABABA"));
	}
	
	@Test
	public void containsUsingEveryLetter() {
	    Boggle b = new Boggle(3, "ABCDEFGHI", dictionary);
	    assertTrue(b.contains("abcfedghi"));
	    assertTrue(b.contains("ihgdefcba"));
	    assertTrue(b.contains("aeifcbdgh"));
	}
	
	@Test
	public void containsUsingALetter() {
	    Boggle b = new Boggle(3, "ABCDEFGHI", dictionary);
	    assertTrue(b.contains("a"));
	    assertTrue(b.contains("b"));
	    assertTrue(b.contains("c"));
	    assertTrue(b.contains("d"));
	    assertTrue(b.contains("e"));
	    assertTrue(b.contains("f"));
	    assertTrue(b.contains("g"));
	    assertTrue(b.contains("h"));
	    assertTrue(b.contains("i"));
	}

	@Test
	public void containsWithValidWordsFound() {
	    Boggle b = new Boggle(4, GRID_LETTERS, dictionary);
	    assertTrue(b.contains("eng"));
	    assertTrue(b.contains("engon"));
	    assertTrue(b.contains("engonces"));
	}

	@Test
	public void containsWithValidWordNotFound() {
	    Boggle b = new Boggle(4, GRID_LETTERS, dictionary);
	    assertFalse(b.contains("zkyz"));
	    assertFalse(b.contains(""));
	    assertFalse(b.contains(null));
	}
	
	@Test
	public void solveEmpty() {
	    Boggle b = new Boggle(4, "ZZZZZZZZZZZZZZZZ", dictionary);
	    Set<String> result = b.solve();
	    assertNotNull(result);
	    assertTrue(result.isEmpty());
	}
	
	@Test
	public void solve4x4() {
		String grid4x4 = "RHREYPCSWNSNTEGO";
		Boggle b = new Boggle(4, grid4x4, dictionary);

	    Set<String> result = b.solve();
	    assertNotNull(result);
	    assertFalse(result.isEmpty());
	    assertEquals(result.size(), 40);
	}
	
	
	@Test
	public void solve10x10() {
		String grid10x10 = "EYMMCCSRLTJTTSDIRAOARLIUNIEPEOUSRCGOISEERREEISTIEDTOMCTEEVCMKAUALILARETNEERECTRESIEENSPGIZEOECEECUDS";
	    Boggle b = new Boggle(10, grid10x10, dictionary);
	    Set<String> result = b.solve();
	    assertNotNull(result);
	    assertFalse(result.isEmpty());
	    assertEquals(result.size(), 2624); 
	}
	
	@Test
	public void solve20x20() {
		String grid20x20 = "EYMMCCSRLTJTTSDIRAOARLIUNIEPEOUSRCGOISEERREEISTIEDTOMCTEEVCMKAUALILARETNEERECTRESIEENSPGIZEOECEECUDSRRSRVFIANRSICWTDIEIOEIUFNIDLAAEEOEIEITMNTLEAVIEACALISCHVZEATUISIUPATOLAUAERNETASATTTADVTTHZRAANEUZFPNEENABIIELHCNITESAOUELSENXRTOJLCASTIEKLKRUPELETAIZTLEAPQGAEOCBPTEUTNETRTOZATLUUARAPEPSVIPESXOLTEATMYLTTUMELCTAHSOWLSADOELOUAMISPAREJPMUAASOAESZSUILUBRDRANNYOSFEWNOLNEUDPATCRWATBLTTPENSAAUNVKSLREKIITTC";
	    Boggle b = new Boggle(20, grid20x20, dictionary);
	    Set<String> result = b.solve();
	    assertNotNull(result);
	    assertFalse(result.isEmpty());
	    assertEquals(result.size(), 8377); 
	}
	
	@Test
	public void solve50x50() {
		String grid50x50 = "EYMMCCSRLTJTTSDIRAOARLIUNIEPEOUSRCGOISEERREEISTIEDTOMCTEEVCMKAUALILARETNEERECTRESIEENSPGIZEOECEECUDSRRSRVFIANRSICWTDIEIOEIUFNIDLAAEEOEIEITMNTLEAVIEACALISCHVZEATUISIUPATOLAUAERNETASATTTADVTTHZRAANEUZFPNEENABIIELHCNITESAOUELSENXRTOJLCASTIEKLKRUPELETAIZTLEAPQGAEOCBPTEUTNETRTOZATLUUARAPEPSVIPESXOLTEATMYLTTUMELCTAHSOWLSADOELOUAMISPAREJPMUAASOAESZSUILUBRDRANNYOSFEWNOLNEUDPATCRWATBLTTPENSAAUNVKSLREKIITTCIIVSOMUESTIURFUAXREEUNUENNETEMUBENANVSUCIMOZENTLVPTNSOYAOATOSPESVAESASYYSDLBDORAGUHPLEONVFRELENTICKIWZRNMIMSAEIMRALOVHETSCEJSDSNRTCSGPORUBTEWESDKLORLVTESELAUXIEUSIEETFMIPLLLNEUYPRLPIIUJIEWVERNEUSSNNAXOASWCLERMDERUPYURMAAREUESCRIQESBEEADLDNLHTSNAUCXEADSTCIQNEEETCWTCTCLTAVXGIIUORLOMEWBLEEAOANRJEQEAQHZETMAMISIRASCERANIVLETEEUAEDEAATNSOSTWTBTONUASILSODHXSMNETECUOESEPMOTLNDAMVDCAEEBIUALNELTDRTNWGERIFTERPEPDETDBGOLLULNEOYNESONNRPESAUSTIEUNDAEVANSMSPAISINUSITIAAGRHOAEEEWOTNLAGTLINJDSSNOCMEIGVULTKAMNARVCLOOHSLGIUEAWNYTERDDDUEPEISLSMAEMAIENSUYTIRAESLIEHOTCMAEOEOVTSOIOSTIALFERTAPBUPTEFEELEEONKEEECTCDTNEUIDRLRPEENMEAUVZTLTSETAEIDLSRGSCVLSENMETYEOUEQESASSOOIAJPRRSYTIOQESUGWVATIXLUUTOTIMWLPESREEICYLREEESEAUUEEEEAPORNNTULIVLONANSIPVOEEACTIUECMEUDNENRQAIEORDHLUOMRTSRMETETSWLIEQCMLTSLVSADEUSPGLMYRUTEOIXIUOEPDNECTNTENTDAUALDPCSOAELJVONKEFTNEIUEDEEZTSATENCAECTOEPTLUATRIOCDOCRDTMUDLEUEORNPTMEINTLZEJAAANEERADIBRAEAOAANPOISIEEURTETTRXVTNEOEGLELTAGKASOSRASTLUADXSEPNLSAADOAIEPJSWYEDATMRSNIVMRISEAWEINVATEPCIUUESSSNLLSSSMIXLESIEDETTSSYOEUIPWLTETITECECOIEEOZWEAENMLAOROOSPPTUSIDPKDVSRNQAAJITUSPUULEIISHEIOGEINPBBSITBSVETOFSNCNAETAOWOOEKMUNTAVROONJRADUUACKNOQQKNNNRJOOPEEOFZDYSEAOLTSCLVAAAPIUECEAUOFCDBNTMXTNEETPOITWIINFAELTGUEEISPZEACNEQMVIAIUSAETTPLHIUAETQAEWTFUUIPOUEUESNSOXAIXAEEYAVQLLSSQAREESSNMEOLSETLVTTBPBEOOSESIUINCPNERSRIITERRINCNHSEMAUNVASEEUEPRLDKIECNWTISULTMMENENSAOJGIDNTETSELYZAGTCTAISIRAIPZEGEIENJREOSUUSZUYNLNPOOESURDDAUUUITNOUSPIIUAEEQERELUMDALNOHDHUEUUIIAIAALTLUNNSNAMLEOPRECYSUCVIUIRSATENCTSSJENIINREUENVIRSNTRWZNTAEEIEOUAPNTLMAYOTRPSUUNNUIPTSXAEVPLKMURUASOCUIMONTIJCEKSMAEAAEARUROSAEITPIMVTITYEVSUALPSOSALLKKIMIAAIEVPLOZJIRNCEDCISMSSAMNEROTSPRNLTLHFIOKOLROLEEAEJEXJSLIHSEAOELQNSRWIZLUIRHURAAREFSSDSEALTKUEDIQTDPWEKSELINEALINEOZEREMTJANDNRERRACQOAKILTRCSNWATAAVALOMMUSLRDQAWQPCNEAIOTAJSAIEDRKOXTASFYVERMEYRNAIBRDEIIXLEFSESVSQRLOBKATCPTIUXPMVANOHCEDLEMKGEVSUOEXJJMENOTEATPTYLEWESOEOTZBVEIUGSEASWOEUEOIRPUPDPULSIDSIOSUEEEALDEPELTUWSSIPSECINICLOEANTYLSCEMTSBAIRODUTATHTCEEUTMRSIARNPTAMASRRILDIUWNTAISAATCULURSRGEIERRHEEITEACURORUYFRETVCXEGADIIUNGUENUNUBREUFLNCCRETDEETWMDUNTTROSYNTOOIEEEUTVENRA";
	    Boggle b = new Boggle(50, grid50x50, dictionary);
	    Set<String> result = b.solve();
	    assertNotNull(result);
	    assertFalse(result.isEmpty());
	    assertEquals(result.size(), 27922);
	}
	
	/*@Test
	public void solve100x100() {
		String grid100x100 = "EYMMCCSRLTJTTSDIRAOARLIUNIEPEOUSRCGOISEERREEISTIEDTOMCTEEVCMKAUALILARETNEERECTRESIEENSPGIZEOECEECUDSRRSRVFIANRSICWTDIEIOEIUFNIDLAAEEOEIEITMNTLEAVIEACALISCHVZEATUISIUPATOLAUAERNETASATTTADVTTHZRAANEUZFPNEENABIIELHCNITESAOUELSENXRTOJLCASTIEKLKRUPELETAIZTLEAPQGAEOCBPTEUTNETRTOZATLUUARAPEPSVIPESXOLTEATMYLTTUMELCTAHSOWLSADOELOUAMISPAREJPMUAASOAESZSUILUBRDRANNYOSFEWNOLNEUDPATCRWATBLTTPENSAAUNVKSLREKIITTCIIVSOMUESTIURFUAXREEUNUENNETEMUBENANVSUCIMOZENTLVPTNSOYAOATOSPESVAESASYYSDLBDORAGUHPLEONVFRELENTICKIWZRNMIMSAEIMRALOVHETSCEJSDSNRTCSGPORUBTEWESDKLORLVTESELAUXIEUSIEETFMIPLLLNEUYPRLPIIUJIEWVERNEUSSNNAXOASWCLERMDERUPYURMAAREUESCRIQESBEEADLDNLHTSNAUCXEADSTCIQNEEETCWTCTCLTAVXGIIUORLOMEWBLEEAOANRJEQEAQHZETMAMISIRASCERANIVLETEEUAEDEAATNSOSTWTBTONUASILSODHXSMNETECUOESEPMOTLNDAMVDCAEEBIUALNELTDRTNWGERIFTERPEPDETDBGOLLULNEOYNESONNRPESAUSTIEUNDAEVANSMSPAISINUSITIAAGRHOAEEEWOTNLAGTLINJDSSNOCMEIGVULTKAMNARVCLOOHSLGIUEAWNYTERDDDUEPEISLSMAEMAIENSUYTIRAESLIEHOTCMAEOEOVTSOIOSTIALFERTAPBUPTEFEELEEONKEEECTCDTNEUIDRLRPEENMEAUVZTLTSETAEIDLSRGSCVLSENMETYEOUEQESASSOOIAJPRRSYTIOQESUGWVATIXLUUTOTIMWLPESREEICYLREEESEAUUEEEEAPORNNTULIVLONANSIPVOEEACTIUECMEUDNENRQAIEORDHLUOMRTSRMETETSWLIEQCMLTSLVSADEUSPGLMYRUTEOIXIUOEPDNECTNTENTDAUALDPCSOAELJVONKEFTNEIUEDEEZTSATENCAECTOEPTLUATRIOCDOCRDTMUDLEUEORNPTMEINTLZEJAAANEERADIBRAEAOAANPOISIEEURTETTRXVTNEOEGLELTAGKASOSRASTLUADXSEPNLSAADOAIEPJSWYEDATMRSNIVMRISEAWEINVATEPCIUUESSSNLLSSSMIXLESIEDETTSSYOEUIPWLTETITECECOIEEOZWEAENMLAOROOSPPTUSIDPKDVSRNQAAJITUSPUULEIISHEIOGEINPBBSITBSVETOFSNCNAETAOWOOEKMUNTAVROONJRADUUACKNOQQKNNNRJOOPEEOFZDYSEAOLTSCLVAAAPIUECEAUOFCDBNTMXTNEETPOITWIINFAELTGUEEISPZEACNEQMVIAIUSAETTPLHIUAETQAEWTFUUIPOUEUESNSOXAIXAEEYAVQLLSSQAREESSNMEOLSETLVTTBPBEOOSESIUINCPNERSRIITERRINCNHSEMAUNVASEEUEPRLDKIECNWTISULTMMENENSAOJGIDNTETSELYZAGTCTAISIRAIPZEGEIENJREOSUUSZUYNLNPOOESURDDAUUUITNOUSPIIUAEEQERELUMDALNOHDHUEUUIIAIAALTLUNNSNAMLEOPRECYSUCVIUIRSATENCTSSJENIINREUENVIRSNTRWZNTAEEIEOUAPNTLMAYOTRPSUUNNUIPTSXAEVPLKMURUASOCUIMONTIJCEKSMAEAAEARUROSAEITPIMVTITYEVSUALPSOSALLKKIMIAAIEVPLOZJIRNCEDCISMSSAMNEROTSPRNLTLHFIOKOLROLEEAEJEXJSLIHSEAOELQNSRWIZLUIRHURAAREFSSDSEALTKUEDIQTDPWEKSELINEALINEOZEREMTJANDNRERRACQOAKILTRCSNWATAAVALOMMUSLRDQAWQPCNEAIOTAJSAIEDRKOXTASFYVERMEYRNAIBRDEIIXLEFSESVSQRLOBKATCPTIUXPMVANOHCEDLEMKGEVSUOEXJJMENOTEATPTYLEWESOEOTZBVEIUGSEASWOEUEOIRPUPDPULSIDSIOSUEEEALDEPELTUWSSIPSECINICLOEANTYLSCEMTSBAIRODUTATHTCEEUTMRSIARNPTAMASRRILDIUWNTAISAATCULURSRGEIERRHEEITEACURORUYFRETVCXEGADIIUNGUENUNUBREUFLNCCRETDEETWMDUNTTROSYNTOOIEEEUTVENRAUADIFGULJTNLULDVEESENUMLMSRYENWEREEMRSIAASNIMELVDEIVTYQITCPSCETTSCTEEONNNRIASETVRZNUDETLATJRREEDDRENRGCEAPPRWNHJCEZFGAPAKMAIUEEGTONSKTZNIESSANEENARWUXODATETMERAPSAESOACEHSDNEHCTTBSEKICSOLVILKINIAAUYDANERSPNJCLKEECBHAIVXERIVNSCAKTVMPNIVMTYKNXLXIGQIAIARSSUATDENQFEANESPNICWUPRVEEEAUNISDHUUDFIEIOPRESSNSEEOMLLREAOINEIGEAAESETNINAWREINONMEVGEVEISSETUVISLNTUTISPDVNNSILSSVRIAUISNEATQNIJROTHMPEEYNAUSLESIPLNYNKEWTPREREATNARDRUIGZUNQVLEYICRIRSWPKNIREPPSDCEXTKENDNAESOATOFSNETTWIASVSESESEINWSKIYNRLTTTNAMSELCHUTTTYLRURNUJNOEDAPLOLSMEZUMEANMLCITERTHUUEOUNWQCDTORRSUTTODSEENEPOVEAISEULEVIETSIZOUENSVXOOTSEIENTIROUMUCEQAAMEAODJSYEELCEIATAINSEDOASASPEUNIDROLAEGNNSNTUEZITTRDEVZATEGPSCEUECJEODRDASTTEESRAAPUTNAIULLIUPNNESLSIPXNEEAASGMCIIJMERKRQPINAUEIETROEZTHMIEEBRARISMAEESPUAIHQRDXOVAEASEREEGRITIIAANECPNTEEINPVTHLIEDTNDCTNPCAIRTZTALSFAETPNNIRSDJINBONSINCSMUEPEUIELVDIIUOZRPECOIVEINVIKLSLOIOEEIEASUSAURAYYJONOSKOJULUSEAPRTIRAUCWNVXUUTENSEAUNLAEUETIAOTTNESINTCCULNDQEIIWIEARCEEIOZEISDRTUDNDOCEATINMCAENTARNSILDNSUOOSTATLDAROOXIMLFAHNLLQARONANUITSEBXLUVJLURGULISLUIESXLTBJOSUUATCQAEEAIDDSIVOKEWNWIDUULUIRLSEVNDSYENIEDEOKNESLPEIITSCNAGROURITTBNNIQTARUCEEQMNIALLLNASTNNOBTOIAETLUNTWESAETPRATTNPNCTTTCLPUREEDOETRIECUSCOFWZNIXASNTSEEEEESEORIINDCVIAUOCIIBEFXUTANEUUTSUARLLMEEMUNNSNRLITFRIDMRDULLPEOIGZCDTIFREEAEERPACATARWREABSTATLEIEPTAEOTPAEREUTLBIEUEESCETUEIAAORPIUFGOUIFEJTEHEUUOTMCARFNVSDIVCDTENALSSAHSEUARJATNMHAIECEMODELRWOTESNEEIASCAKVNTPOEREREIRTAOATEZEEONLAPSRISFUEEYPXNZTANXXEEXSEIYEIESOLTERSREANUCANUESQEZSSTUSUEVDYIRSSNERDUSERNEEWESVNADETAOZNSKUNERREAETNEUPEEMPSDITEZCSEOENVNVVUFNCZEPRMEOMRLESSUESIOENPEDEEETHAARWVRVAUINMIYMMOCUYROSAIALAMTHIAEIOFUWASNTAUMEDALURKSASIALDUKELPDSISELNIAANARSEEETEIEDELUTONNELAERONIASOEZUINMSUMSSNRLSNAALIAIPCZEEOAMUAZITIIORISIENIEDLXDVNQIOIYSRMAEIEDZNEUUCMIOYLUCPRNLNTAILLITYEETUEERAMAVTEMASELEUANAEESEDULOEGEJRXDAENNIDNARETZNPMRSISOARAERIENNINCTSUTTRCURNSIEWPAFSCIRVNLTEAMAIVTSAANNEEWOAPTNNAOBNUGSSETOUCTCJMSNAUIDAAEEMPTSMOESNRAAIGEPPUXILODLLNYTMEKTNEOENIDTICKPNIELNAAFAEONUURLSIUCRELEAIAEUXTEIICPFRJTEEAUDMAPSESUPNRAIOIATLOIANAIINCENIJEEDNYEOMAMSSSRIAEILSJAXIUSUESEIIASTRNNICGRUCPOEBLENJLOEVDSIEKRGDADEUMDAETIJAXOCINNAROXAUEEDIKNADMPNSNMEATNLOFEIJTIESZPTSEZRHYOTRUDCNAOUAEMAEEAECAEYOQAOUESXFIBAIEOCMTIREUINEITLUIAZRSYEONANLVVITAASUKATOTBADRELACZOEHOAYESOTLHHLXETAIPIRTNEDRLMSKEAPSEFMMESBIEOADEICANISLUUPESAURSRTYSRAUNOTOAIMUAXLORMIXEEFDLORADEIQTTSNVQEISSEUEINRDLESERNISBPLIDYNAVGESRVNAANCRSDRSARONFECEAAMLRIROALDRSETEUCAULOIEOAPMHDUDSADPNMOEEIIPENFUEEASRATTSWNAKATOVIVEIANLTSNAEPSIRPNRLDURRQVESEWDTAMSENMSNZSSCCYUSCAAEUESRAOLUTMAQCEIITTNMSEAACTAINTTLETUDAEEUDREEOIICAAAOTTPNEIMDSAAXOSEUEREIIOSIUTOCSNINSNDUUTREZRNMLESLEMLURSICONJTNEAICNENLEDZEQYURMUNINTOILEAOUUAORLMLIGSNRUTHIENHREUXHEPNNEKTELQEIESOJESPVEOPNTIAEASOLSPTNTETLDEZIETNETAQDDERIDTOXPPEENRITPARIZCIPOURERGERISKIUNAFDIWULONIOSRLCIRITARRNNNRIPTMNEMOATOUPOPNUEMRROORUALTILUADEEIMLVTTUEINNTANQERPNNEYVEROIEENFUUNALICULDARETEMTREDASOLGSTSJPEPTNIBJUESSXUTSTIEDRIIARLINAESHANREVEGZUSIADPHETEFGKTETILXIATEDUYSENRRCBPSPEECNCRALAPORSONSUISSOZCLSENARDAYEEMQCQVOXAENUIOASURYEIPNXETUIMAERSOEAMERTUSAIBOYCOEAOOSIYUMINATOVLEUDSETSMLREUFJEMDPMNIXRTCAERVEEEMAEITISSOTTACEMAEONPTESNCUDVPEPTIPPMRRSRYEAZTPSTLWULNKUESEIULNUEEIHAIWQARLAIJIDISUCNINMAEUBINPBUMSEUNNMBUZLNUNOSLSRUOAUEBOORIBLKIROPISNSESVTOAALREVESVIIAKNONENRAMBETTSLPEUSMSCEEJEAEIIEISOCAPUAUTAVDXANGUNYSITUIEAEESKGTIAVPLAPLIDXAOELVMFARRUUBTEAGDTTSVJRANASXDBNSRIOURESADLNQPUWOSRNEESUEDITUTGOSIAMAEESDTZSXSIUETNESEEEEAVTIETADNNONENMAUDLTEESCVSSPIIAIEUOSNMMJSEDERPRTNLJUPAAJNLMOULEGTSTSTIEOURIJNEPUXZCXALXSLJLDNJZNJIEEUYLNIILSQGSLPXESAEROPEOGAVESQODEUIUTTIAEIONTTOEDYTNNNCMIHFREMRAMHNCRUESVITTELEAVLRKULSALOUDNENFIEMWRBPEINERSNAESAUGIIENFOSJUEVESSSCSVACEDEDSCCCEZLTSVRTMPLREEELEEOSLNIXNMSNAAUOAEEEEUIEUOELBXLSTRIDLSSANPMSPSNHAUUUAISBMAVRLBYTIEBEEDEULLSBEJAIIZTEONTPLVRAILIOIIIIAMERASORRDIELPEVIATFEMEETPAMIEBSUAQLLEPEIBNDCVAEIOTZTHRMURUSRMSEIUEGIJSSLVEAEANIOKAMSUSRIPREIEOFEELREIEMEEEEQRIUUOOLCRJMTUIMWNLTKIRAAEERUPNERUEOIINEILWSILIEUSIOOIISSTATQANSWEIWAEXTISTROEEMEANODPRESTMEEAIESOUEECHEDSKSLTAOLFONIANAESAAHAASORANUDILCXUTATEICXATEBESVTOCASAEDAUENEETIQITUNASENTWEEFAEASNTNUEAESMEZTUSBEMLLRAEEEENNALIPEFRIEMMVKZOUIDPSUXPENTAIUEAISARRONLELESNEAPEIVCTASSYISIAUAEUCHHEMESEFCTPPTEEAISACNEUREBOSCITYIJSINTHBTAITAAEUITSEQICCOPTQSFNUEMEQAEPNFBDCQDHECALTRCQPVPABUOAAAMUEUMUSEXEOLEUSEDNLNVDNDRTIAPROEUERDENREQLUUARSNYVEUWTOEACELRAIIUKMEAQICDOBPMSESOUIAAELOEAIXRCUSEESAECNHVCSPTMRSEKEASNRQRALINTOLJIHPQASFULWIOTUCMONALVLEOTMPURDARTLOAEAATOLSEREGMCOINIXZLAUEURESEPLTTXSEHRCIEMIDALRQIATPISKRELRTTAAIOTRNISANVLNLNOEESATEALVMITCUEZNIDNEKDMAVVSMKCENLNOSTFRFIMDAEAEONSATNRAOCUUKELGAATORPOASNRENXSMRUJEESETEATTZSDLRIASWLRSUXUEUUYAMISENQNWLIHTJIUXSEURTBTPDIMYARAASNEPKIAXLSOSDULCOVENITECNTJMYETOSNAATTMSALSTNUCOENTSSTRDAKNNSANOKETGLSYSIRRHNSUDUEAAINMSMLLJTRBBREIMATSXIXVSEFOAAAAUAEREAMAIXROPINEDDRHZDJONHTECCASESOESFNOUZSONFIIMNNIEONOSADIJEERSTAEEVEIYRRTENAUEROEAEVWOKNLSTLIUENENTEQEKEUSNLXLRUPCAKCUELSISLUIAIRENNBNWLREOWECIOKUUTCRETPEELIBPLLTATHDUGYESRMLNLAPUGUADZIAEEICZUIMEUUEOTTILEORETAIULUDITNMAEUNTIDPSCHOENORCTPSCCNAFELDTIRSSAUNENNEIAOINUMEIAMSEAICOLIFPNUITEIUSEVZVUIEFNATRNULHEESMLEEOOIAEEPSCGEETCBPTAHFTUEASIMRSRMWAZIIFRKSBSERNQASLQRMATONDEELNAABTUOLLYASGKEOESRSDETOCAUREESOVWIQCICTOEIVASNEDCRECAENRCNSAIPNAMTNLVAOCRLNSRSCSSZFZURIHEPALTVUDPOEISMEEETISTRIAAAAYOTEREKNMOTUSELIQESPRLOESIENTODTAILRSNRAEHUSHNCWRSURSPTCXEILRRHICRELDIIKPRFLSLOMQGTOTNEPATUHUNSGRNEIUERRRUIEAEUNTNEATSNEEDLEATLRRIGDTNLCUELMOEAVUOLRRLIAMESLMIEREMJOWIWMPAEYOJUSRDESEVEPOAENAEINMSEZISFNHREIAKDLICTOIHONSNUGBIPIPCEXNLRREGFPBFCZSLREEUEMANDUJDERCASETELGENFERUMREQEALSIEPISGSCOUILIREPSSLEVLZRNSAZEEZERVSTHUOPMUFSREFOIPWFUTNCTENNHSMESQUTSLSRDSHTBNRITTOEENROIUICRJAEAREROUSOLLUYAALAOEAPSIECTAEREBTLUSMPTABCNMXNIONZEASFKNNSKOCINASGLTSNSRSCDSOTEOEEEEOSOALQESRRGSNIGLETDILSDCMTRMTQANSREEEOLUAZEITDLCJIAIRWAUSTEQNOUIVRDRUROANENRSEULHVSNNDIOREEXEUAEARSWOSERUMLHTQLTASDTRRLAREIOSRPESADSAOBDIWLSOEMEEAIIETNKUTBGDUIWSNXNSEHPQSNMGUANOATWLDLTIQJRICUTUOAPMIIASLCOOUASSKAIOESAENNEEEZACNANUADGNTRPPXISLRULEKZOUTIADOLHERNIETUATEURATCLONNSNARTERELIEYDNUEUSRNRZUOEURSNELSLLAOUMMOINNIRADOUITTMSUEDIRSTIZPMPWJTEIYHIVOORERGIENNEAUJETAIDVOMTRESLIIATLAAENMIRBIILWSASOTYEANEUISLRTRNCCNRTNNEDLUWCUEAASCDTLAEIVIAUQTNBNTUETTSBTTAETMYSLCVIJUUEVEEQLTJUAKFNITEOSPTTSRSUPTSNRIETFERRDOTCSEEGAKSLMNUASNRASQWTSVGTSRLSZASLEISAIAEIFIVDLEUUNSALSSIXUTINTLEAXISEEATIRTOBEOVITAVTEEADEHAQZLTEAERAIVESAUIENRTVIIGATQLNYLATTNEYAAWWEUIITDEASCRAIAERACENCEVDSEGCASBADADLRSEGPNALORSOFDOMNUAFNNNNEEEATOSPDLMSIDRLORPGNESLEVXIACRIIKSMYAEEEMAILEINDESDNIAENUMSPGETUTEMSQNLNESTECPEECHAIUUILSTWLIIVATNLMITHROTEUNOANAISOIJNNTRADSEADEEYUOAEBEJONEARECAYTRKUFEELERWERISAONLOMIJDSEENSETUZUAASAAEETDAESAEUSEUINUUOANUTEPUROTEERSNMIOVZAEESBBTUTLTSUTTUEERQEFANLUEKSILUASFSIDREEVTAENLSESMAMIYENWVXWEELTRREETAUOEAKBZTVNUIOOVLSQTREOTQAAECSISISVUIDNLAEVILUMVLRTZJEDUUURERUPASNFFUPEBELFOUATUYJMVUNIRPASMSCSULRGCVUNOMENKMTAAEEIURRNERNBPETUUUATAIATCUVANACSIIEAGKVSLLRDERDLAAIRLUTWENIPLNSREMVEEOAIASORAEIMUATERARDEIAIPAEEOARTETSILEISEIUCSAASVEAMSGEEAIEEMADLOTRAKNNURQECAUAAHTCTRSQONNAIOIQBIADTUUEECUZERTFAPSPGMPSTTENITSAIISMSOLRNIRRXNNNTEUNSELSDNYEIILTRAPGLMANOPTESPEUISREAICSADNVSIRQSNCTEEUPCREIIMMEQRNAFEARBEECIORIEEHLESEAOSMACATSMTLSGNYUESLHNGEUSUOMVRLANSCOYOXRTSIPENANASRSAELXANSCOYAUSONKANLIFPJOTSIASITCIARTFRAEDWAUSMSERNECESOILSIPPCRIIJANNNSTJUSMPIARCOTIURSJMPEEAAPPSIJHVSSSITEOEABTIRITUOXAHHIITZPGRCURRRSIPSTITMPSIAERSQLJARAEETAEBAREBCLUEAONIEAAHDIIIEROEPUETEEOVEPOIUEDIEJIRRNDIEEAEUOREMSMRJMTMAVKRNRTNIOSTQVMLHQOTEEURVNSGAJPLANNRLIPDSPMTAAIOBSPCSULVUTENTEIUEETONANLULTAHNSESSAA";
	    Boggle b = new Boggle(100, grid100x100, dictionary);
	    Set<String> result = b.solve();
	    assertNotNull(result);
	    assertFalse(result.isEmpty());
	    assertEquals(result.size(), 66009);   
	}

	@Test
	public void solve150x150() {
		String grid150x150 = "CTIIIEREMOMEUNUARCNUSUESPNNUESTISBEDBFEEJLEAEHVNWADSRUNRRTDIPTQSTERNRKTOIOTNENRTWYNHETOLNMSWRIEAEUESSOACKEUANFLAUVVXTSASISELIEUPNPRTUAEUVINSLTEDUULTATTSZTUOTZDWURZTYDTQWIATSRUVODZEOEJTFEILATERNZEIIMIISOOIMAIJGELRTDSQIICIEUHSSEULRSSIAVPEAECNRKYNADELFLWMEXRTILDVUSTBONMEUPAUSBTLMZPOEAAEHEORYNTFEYHIUETCNWLTNSIRANESELGAQROESSSONLVSSUTNTALIAISTSSIJQMZEZMSIAEZASDNSUMAZNCFPSZNIAPEDORQOIEDOEEGMEDKCREENAITPXEORAOTMRVEBTGIEUOVNITPAASNIOAIUALISBSSAMAXUSIRLUONOROAHMNEEOOLXLUMCEALILARLEIAATOARPLNRFTEIACIENGERLTBPRMAOITAQEAINTUUDBETNFMDHDLALTEEOSSDODIIVZOMAKNINQUAODANEUDCOVTQEIAVTVSAIIDINTUCEOESFNTDLESEDRSSEEOEEENRSAESJIMSETBIOCRSEGNTNTEAIELOESETRITRNDTDESGIUSUIALAVLQITRITLEUOIATRELXEAEULIFRERLSTIETNISAAERQSELRSISEOEEAOUEANAIRSEOSMAETMITNPOTUPIEUSRTAELEEWAEOUXNTATISITESSEPMDEIVURBEETAAMMJINUNJINOAOUEKJONZLUCGNLAIEAJEOEOLSELUAIRODAOAEAOIOTESOTEULAUEZSATSYKISAIIATZRETNSTTTBSPNNEOCCSOUJCHDOEEEEPSROSTXQOEAETSTDFANINTRETAETNRANSTRNNNAEWIPACAETCEJRHMXSOVTIAISUTEDLNETNRAEQILDUELWNUEZIKTPHEAEIRCNPRNEIECFVSTTLALPOCTAVMALPZESEAEFRWBEAROOTAAEEEIENTLOUIKTASEISSAIEPIINEUXTPEESVADHNQREEUREXIUUGKTRSSIHDEKINARAIFEUITTNZKTIICJTUVNLISRAEXREGOTAZUISALSUARUUEVRAAUTAXRSEOTSSAEHPLUIIABEAUXAYUTSOTTXMITPMTISIULNISWAPUNAVITDOEPRASCHSIRIUEMURESOIELLXUUZOMREGDNNATPOPLEERINIDTUCMSRTAIRTPSTENISULCTNREXHUSUQINLZTZUGISDEPEIDFTAIEQAIUQSNDSPUTRURSAAILNITBOMISSDEEATEYEXEWRENTLNSKIVSNTLIONANDLGARTDADTABCCITOATJHADNUDGEGUMDAEPUXCSAVIEPTMIUCTAAIEGLFRWPIAIRQPTINTIEOJFIRIDIARUNCODSODEIUTIOALLDSIUEIPEIIVNTPWAYCOOPUACRRULTLCSDWFEDETDROHSUTDOEIESRIPNEERUAYONRAIFSDASIAOULPDSUEKATOLEOWSASSEMNANSTENAMIIEDVTSCIMMOUOESSIVAPRNIARSRMILASAWMAEESANUAMANNCSINVETNIJCRINRIFGAUTEPTDEIVLWIYTELCENETCENERLSTESTEIUAXEEOORTFEKEOALCBNSELRSSSIAMIUAEEESRAUAUEAKSSETSTKBTALOTESOAITQSTNNKRNLCBRTEEVIECAAAMENAERHREEOQMEMARMNTRSTAIEUEKHALTTUHRNEPOKTJIEANCSJAEIIBPTIESSVUREEEIICRKCRPAVHPQZAIBTTSETNSNPEERESESELUQTAOPOFONSIHZSTPNTUNLARRNLLOMORRRISVILESDIISNUSPOLNIEOISSTIRVRTRCUSAXUSCAEQNIOHWIISDORIUAVIKFSULGHIALAGRONEVNFDCONPLJZYOAEDALGRLUITEMEOIMUEEETYOIAILRFDESEDCAIUEUUMESAOAELAEGNOESEZOARPEOCKNOSVTLRONSBINXKRSAETIAFAANPIIERTAEOUPNLTISESECERRVEROLDNTREUDCSIAELLEPATEBICONRLRWNEGZBGEYACCEEZAICDEEEUSSIRCOGRZRUIBRUAAYOSDNEEUNRENAEICDDEENRIIFMARUMOARJECRNLAIVWRRALTAMNVNEXLAATVKENAOILURUNURNYLEETEEEEEESEAEANNTSWEEEMMLIYEXETAZTIYRTKNESIDNEFBULKOEIROTANALTLWRYIVEEAOTASVENSIANCTEAAMNMIARIIAONIOEOZSGBALNAORSESTXIINIREEITSSDMTSAPSUATARDRYOLTEBUIGNVEAUINIUSCEUISSEEEFACSTESEESITAITHRSZIPUGSETEEOEVERLIRTRAAUMAESAACORAUIMSRACMTDUSNSTSURTLTACSALTLAQLWEWLSONSIUPTPCEOUSAUEEEJUNLSACSYDTASESATPTAEQUANNAPLATNEEILDBTOTSSIOODVLCMNEEIANRSESADRRMPHIREEASZESNELJCEIAAPECTRRESEAEBATRNIIAMOSVEELNIUACILJIHCDNNLRRZDDBVLARTRWLOPSNTEDUAUIIITETONMNAIOPRMENEAEADTAEEEEESEEEARIEISCPVISESALSOEXTPEUEEEMMTTZADECPREXRNISIOUDODUSSSETQEEVRISUMUKTELSTSIRACTWUNLRPEZIURJVAAREEONESTELCTCERTSRARBRELESNIBRCREELEPVAENAEZELCINNVEULGEWXNNUVRTRVEHMIRNTLRTSXEEROLVNKYDUAJEKIIEOBMIIUNGENVSYQVUTXKRMDEPPOSONJNCRSUECNABOADEISOPIDGAESROKRUVSIOOAIIAAUIKOMASBNAHERBANILOIVELVIQAUDAPAQMDXALTELJIMMLSSIRNABNERAREAITAPTLTURKLVLATNREIUASEAERCDQMSLAHDDABISNUSIAAEDRATIRRVTESSRIAAEFETEARESONNRCEERUXLPRUTWFIEJTOARSUALMDNVONUSECEUTPLSAERYRANDEITLAASAIHAOVETNTTUIONAVEEEPFEZPZLLEBDTNEDOUILNNEMOTRREEEIALRCZBELRCDIGOUNNNJIEOEOTSEELSUTOPAAEMCIEJIUJAIOUEAHTEIDVOLXOCANLSTSSNCINQTEEWRFENUCJRPURAOASJDRTATWUEMSMNRSUITYSSLASUSJNISNQASOOAVTIADUEZGSCWEAUOMITPLAOAITPIOCIECDGNSASXSARARNEUTCPEENDNLEREFERNDLAARIOOEIIIEODBIQNTINOATINVRESIIILNECQNLAEJAEEUCQLCTRJUNFMNAAATASAFBHRUKISAEIAOELGPOEUCLUWWEMEGTRLXSSIUXNSDISAPUEUTRERYYLSRPAPCTMQKARMUBPIRJCWSRPIMIBNSIIOMQAAISVSULLIPOIEUECOUEVKNCICBASPTIMANASNIOTRRROYNUTUJIEARRSELUERLKEEEEOLCVEETCESZAOESEENMEILRMOSEDJNPMUCTATUSLEENIAROEOKTWUCNSEDHLREASUDORCASAGTJRSRGISUAKWOCRPCNIEONEECODIAETSICREIVLAPSTEPEAALSRVAESOLSDNOIALKAPGCUNBINISIFEIXMCCVCIUNJOUKRENVSNLETCUCALAYLSSCNAOPQEXSICREMRETKPELAAEALAOSLUUGEAODXECEEADCNSNTNENIANIMAONEAOVINSTADHILRILLIEEEUOMSVNXISEERUJAABAIHSTSEEQJNETEWUSAIEUBOIQGEWRSAEMTREEPPEREUDELPTAYBDESENOUSDOUEICVSNTKIUTGJNUSESCJMNONNISIISPNELSIEWYTTLOUTAESIXTRMMSXTUKDTTEHTICINYOAOMLIDCEPITLSMSTSREUAEVNIITWLRLSARLVECATASZCLKRRNSETNTEENTJMIOMASCOMELPPREJVITNIUECUESSTPIEHEIARRZARPENWRLORELLINAILIYTTDENIIHTPREAEAIASTPYTRUDNPTEYDNEOCEUEJGDIKAEIOTLJSUISNVNLEASEAEDTILTSIDCENTSDRILLSCTEEAESEIATKSPSXIMLROEOAOPEISAZOLVERAENKARCEILERSYNFSMELTIIVPFACNIMSQEEFLNSTABSTSSVMFUTANSEJINZYPIEPZPNAUIRPDPRLUTIENZNSETEPEAETCTRSNNDDDVSETGCPNAIACIRSSOSOTLTAONEBIOIPESMSRUEEOENLONIAYLEUNRSLLONENMPOSEUENRSMLLDNDLNSAWRDCQCEPAASIYROILSURDTRLEERUETERZDNLMLOOTJATENANSERTKASWOIIMMENUPOAOJGTRDTCEICRARRSNEIVTEERNWPOASBRSNTANOELUSASDTSSNUELIEAJUUGIRVEOSLOINSTMNUSEAETLCCAFIMAYMBSSTQAIUAPNNLRMTSADPETIRCCCUAEMAADNILUNENAUETLMQZLLNOEEEASUOSSXDMIEEEETLPLTMOJNNIIMLIPIAQSNSTPEQNXCVPNJUUDAUDZAENRMUOANMTOSHNTMAEEISANBUAMSALMNUPTMILODSEMLFOEIACRPIIEAENZTCTTEANMEIPVZTSOAVCXAMLRXLZLNEGKIOLLEEEISTEMDEESTNGURPIRSENSKDEKXARDDLPUIIUSEGTRRPEPSFSUTANARARMRESOSUNERRMEAIBSAEAARITEOESTKPAEEPPFSDGFNMRUEEPEACTMOVAOSLPXLLCAWVANAFQVEUEUEAUKEUPVVIEOOESUHAEEAOPYDRLZRLKTNEEEELAEAULTSNSAREKCSMONASVLOONNUNCLDTNVATIIQASRFDMANUATIERQATTEEUFTHVUEXTNKMTRRAOMRMPUDLEIELEOOSVOEMNUESHLEEELAINRUNEAOJSNTMRCEHRRVCTPELICELSCAUCDIDAIMESEOSAPPEUECESIAIMUVTUAOOTDOUCAHCRFARMTTNOEAYCSISGLMTEPUNUSUEVEATNELNAEPMTCHCSNLREWLUENEAOLJKETLANAAITNCLIRNPIMSPPRINAULECCLRCCKESLOYLEKSAOTEIOSATAEUSETPTTRODRTETWLQREUITIDUGNNLAAZEUUISTCICSJARFEGOIETATNEEIEIONEMOIAOAANKESNIRPDEARLIANSUEVINBTEIEEEUNTLERCSTOMLEXRUJEISDUETAAUEIELSHSEMTRTIIEDMSLWTSTSQCPSCUEMETNNSDEOTREBALRVMIPUOLEHNCNFIZONRWBASCLRSDENAEEDMFLOIAVSEGNRAEUUISTEMDIOFSISOWTRNUTNIEINAVVMIPUEMEIRCJIZEVDDFUITAQNRPTNSTAUAEBUJCHDALHNXEIHMERNAELCREOSTMPZRENHDOEEJAISEPUNEKPDEQAEXNVTAUMPSSCMAUELTPSOQDUAASALRENRZDNZZFRSNLEBARIIUWLNSAURMQEENJIIAWUEVUDOVEEOOEIEIDSKIOEWTCWVEPEESIEILRIAUSSDAEMSSVNSCIISJITPOFSTLWEEAIMIEUTTLCNAZEBVROCEENRIWEARRRLEPISIRNEDEGANKBEECSRVECCYIROPREGTNFESURVSSTRODTHEPITETRRUGANGNHQVNEETIINTAAMEUILRODSEENOTZEEREILHMAEENYFAAULRAEEAQTPNYEERSEATEEMUKAAEUNIMXSALPQOKFCCRRORTSPANUKDPNSTSUNEETNNLEERPAPTUAWXARAEEESAIIZLESAEUIEESRYGPENIMINEATEONVHEPSPRERZRECLOASSTUXIUISFASSYIAITUWTEOCENZTISEIRNSATBTNTSERSEELCAINERURAZUBPNAVEEQAUSBZATENIIRNJNUELEESIXMIHEHIRIIARHTESIEJASDEHAQRDLRAAIMERISRWTEMUCDENIAELENATEEHKBRUZTEONSDYTSNEPKEUMIUDREONKRDARUSERLSISSZEVAPIEEMMYSNEACATEEOTRCSLCXREEANOJMSCSRNRIIOVIRPSTMNTESTRTIAMSSLOMTRTONMITANLSCEFLZBIEEIROEEIIRGNAFUEDTELIUEPOELXIEIRIETUUSIKEZEUDDTSLEXESIVRPTCTEMUNCSUNOJEOJSEIENENSENEARAPAROTVAOILLONIEODIITREOLPDISLLNNSEAASTNMRINAEDSDANNSQLUVRPNANRTULMTDLEYGEUEWNTWRSTSURNLUVUEOAWJEMAXREIEPVIFCWAUMOUUTTOJALPFAUHLOXTVEENSNLREQPERILNLOSORENLVLHSSESCGEHNRTOEUNLYRUIUAINAAOSLPUOEVHPECNLQCVNENSRFATUSLNNAIZXTSTNEADAEOAESCXTNOUNNTORTCUEMUOSLRVDATESNTRPIYCTVTJAOISLNUAERIRACAUSAATNLNSLSROJLTEATNELLRRMOERDAECAUEMRCUALDLSERUNEKRSRTSTZISRRTDEODENZNXRLQXBISRUCEEEPDPRIACONNSNEDYPORIPLUVANRMLPRAOELXLUIEAATTJSZDEEVKAEEKRIRREXSNIRREURCIEUUHRZOOEACSPRNETTSSNNNOTAOPIENAHNNMNRIINTHEMSRDTJNFBINKRTDJAUOPEMHVZPQUESRERRUSAESSSEVILIUSSSFTTSLIMAFESTRRPDSUENJRIAELTIUIDSOOAYTTSGIEREEEAAENDIEUTNPOAEMONVRPDTNDQNITETUSEAWALUAAVVHEUPUUWVSQXKUJSYMIOSORREDITOMEBNTIDVUNPTURUVEMJPSNOOXTONPETSAQUNPAIPLETAEEMRMAIMENDCTHNTQOBENWSAJENKNSUQSUSAKNIERTUVUURAEFSEEOSLVLDADSANRETINEITORTELANAISMAQMOJELMSIIEAMRICONPAULERPBELRSSLSECSSELOISOEOHDXBNERINTRTOSEUJCLIABRTENAUTHEESEKNGNISCDNROAAUNIXIMDNGJDTEDAPZANMANTEQNEBEBCFENLREZATBACPREAIGSNNVSKISEIENAUTFNUTLOAUEMSAFSMAFUEANGEONOKCYEUDMAQENWMTODGAYLARECEPISAUUALMARSLODRTVATEGAMAAIIESNUCANIELONOGLEEOUSMBKETPANRATLKAEDUTAOTPYUSXSETIBAXFLMYALOSROSUNPLTAYEREASUNIURLYETSEAAEUAETLQMUEUEEBRPTGHJOJREODEAUERAAIXNRETRDAELASDAESJNROPDRENOVSAUNNAIIYQEFARVAETLAXOSRNILEPAELEXSSQLTRFDJGTSWLISKERSSIEPCSUPEEONCAAILRTEPTEEAUARAAOEMVMYNDDNEPASNLIERXFIOEEOSIKSERELEAEJVOHNUTDSOUERETINUIRUCRAAOINDEIMEEEMEOTTLQUOIESUEILNEUIATLYTTAEOBICDMORRANIEEEMLTPSLDOIEIEPTIIIALRDEUDAIAUMYDVEENEAPRAETNDLSSXUNEIRNVLNOITEPAEEASSVDDSFUNUOMSSEELEIMONVRSEZHIHSACVEEPRRCEOTTUYETDIUIAWNGEGCCUSIIAROONLAESBIEQUHUMIIBRRUDNDKJUDRUMIECMDEBTESNIEUCNDIEEALQIZHVNMDECLERCOAOXTQNIXIUIODEPJSOIEHALIOWRPVEUAFNUNAAUTUESLAPEBSLPSNOOPCGVDEIRIRAEAEPAENEAXERTCISDNEOCIKOVUCYTSIJNTERBNUPHERREIFEEEAXNDOSAIMEMOUMONUDSGPPALARAMPTATTLSOCMOTERDXUMDEAVVNUCITOPVPSXENNAFENTEHAENANUDUCARSPDLLOTEDESESPLMSEOTENETUVASIAASCIEANETHKSBESBUESUHAEUSKZEIIOTISISSSLEIADOSRSAICAVBONAIUNRRETITSSEENREIBIEENIOETSZIEDAMRSHMRMXRAESSANEABUODIADEEIEIOESURVLATLOGVLWUIEESNTMCURUEJPNNENADASNDLOEOVAANEIAMNQJHZAISDTZWDMIJQYVFOKFEILALFEEEPUUSKDTALAFSRQEECREENLUSSCIILUMHLEUSSEICEERWTNPERDAWNPPANWEINLIRSWRLVBNUSSLKDIEQUNCRLBNTOVOIAONETSNANSARETERPDRELSBTESLGIEIAATLRNSITMRNLFSDOIFNQASDNRAJIESCIWLPEISACAEOISNNAOOMKCEOMPHNRSEUPAAIZOAUCXFANNSLTREOSNBULACRWHOTAUURTDJQNJUOEEATQAFODRACPASIVAOIRXIEDRGRLYLRWIMXDSDSIETERMEEMOIIBSUNALRDASWOUIDEAATEEJNRUNEUSTSATNUESMPRWNISNCOTJAITENOSESEAMNEAEICCONQCOUTLERRWSCMNSDINOIOPUZENNLMIGXSUPIAIONOLTESETSTSUETEETIRNOTEUELDBEUOLTAFELDESCLAIBIETEWESAIMMQSEINESOUPHUAOAEIIKOSEGCSLLLBCRINSWEAOOUAMERDNSETIJSSAIEEETICNLUQTTTCTUUUTITATOMLULEYDAZIEEEMNSOPNLNRENXPITEXWDOITTANZEIOLNDTRRSZTEDUANLSEIKHROAEQEEREIVCRLFSCZEYOMNUMLCUIPCUNNCAWRIULICEEAOESPUUENENREOPUSULLEWDERNYOULUIDLTTEMVOAECSEUOHEEETDIVAETDRAEKOOUSUUAURJNETROSTTTNIEEUEEAUJMEAUEAHCUEIMRENLSAAATIDLELSTNPDMEURSOSUIAZAOENAAEEBQEXPWVLEPNUMMTLNMAREETIEEVCCUULRESAARNERVRMEEOSRROCUEGMNPIEYASMEULASNSKNEEARUEAUTTZOJEALUEVUMSTAGNHMLPTSERINTYAUTKSILALESEULLNLIOMAYEEBPRZOEAEOIIVUTSNIIIARAVTCEELQBISAUUSUNQKVIZRLEANCTRAGSSRSSEWEKEUSXMIELLSKNATARENVTEEENNTPOALRUEPARNLISUEEAAFMJENTVDXMLEERVIAEITYLCQNLSLCSPWETSEJCEZATLCRVAXMNILEEENNVPNIAGEQEEITTMOCUDNMOEEIMEENASBCTAOEATIEIALNADLEUAMSQLOULNEERERRDETUTKWRSTRICIOEEROAANTULOAENTEPRTXRAAMOSTINUVNAPARALEAREEAUITEZACPIQXSNHIIUSLDAPTLYATBEONVTAMSREAREAEALADYPRENZAZARATRLILSOTIEEOMNEOURNPAIUEENUUNMAAOIIIAAEIXAAYEMECDYCSNEGIYEEUSHSTULJSATYTEEULIRUTPNIEUNCTEEENMEERONXAOKAPRBSVIYTSEOMVEANTBUBUMEIHEATEUREIPNSOROALQLVWAIDESILEBELTWNNQBGFCISREVLLDEETRNEARAAMEAFMATLEEDXLRLPLMSEIITOEUFOAAMCTHNDINMICETERENMATESANIXSPMTLERAIIOZAESQVSPNWUEUEAMILNSHJIMEDSNUMTTMIUVIMUUROEOAEATETOBEEAAXLEOEDEPWRNATRSTEESNUCNVGINSISFIAOCYSVTMNNANRRLEESNSEADUINTAMSUPRSMNFUETEAROUIPLTITIACDSEUXISFLTSTSSLDUSRXULMRCETATIKWZSNSXEMAIAESXALNUSAELDUCONILRNKLATTETEZRNTIESOEORNEEPIEMIJNRMNAUNETNSNISCDDIGRVEFEAQPEAVVHOSZTZHIVZESEAEPPEVUQIOENISICNATIUULQCGLBLSATQECAIPSZCIRTURETHNRIEAPTCETSEINEFRSJGMCRNEISUZARECSIAETDPIOGJEYETDMIVUESTINIEAXIPDGVADIEZIADODSUUNLADTSANANETNBMVINLSTSTKRHAIUIXSQKSUIOSNFUEELKNPZIUTAMERUTASLSCAEUCCGPEESNSUNUATAAIIZIASEUIRAAAESIEESAEHTSXDJTSLWEMAUOESIEOLCEDINSATNTYIOOLAPINRADENMZEEOETVLJSLZBQRSAPEEFNASEEUEATILVESWMEIIDVACOIEROUNESSUSERDTEEICNPNIZATRIAGDEEITCNXTIIOEMZIIEDOTCTXRWNDCRTCTIILTMIHNIUTTLNEUREEEESEURATALOIATNNECSHPTAEEZIACETASTAFTEIECILINUOAIJELUTEOEAISRVLDAOKFTOONNURTLVRKUSOSUOSIAIETSOEPUIRLKCUTLARIOLAUALETNZDYSWLTRLESMFWEMINDEPJYXTDTHGUAIAIVEUEEMDINJOAIUINLHALNCISSPATEEIRALEERMRESHTGIUAINEEUTEUOXAKAUELLDARCCUAUXNOTIRSKSONKHNLSUCTNUNLXIUNGEPEEESDNRLRAADMSEESETUCGULXAETIEKRIRALIEFPCEVEQRLMEAITIVFAAERLSTVVRACSSNEROEAATSYTWLWPUBNHNAUSEEDOAECEOPNMEETNUSSRTAITVNLTLIEBAEEUEALEETLRAAETAUOARDINOGDITVRRJAERYITSLERIHASEANTLSTTEENESVCWESUCEUBHTICCSSPIUSIYREZUCIWLRUALSITAENDMLTMIEAEEQOLDTESOISNVANUCNIELUVORITPPLIUNVEUTIRORUERIRUAWRATDEAEVEJILINVNPLNIMSRISOUALUQQNTUUFBEAMLEOIBEMEPLQEEPIUPEIOZULTOBIVRTATOADOLDIPMOQWEISFAETIIIANNMJCDUGRUEQTEGLERNVWIMDXSAMIUNFDEEEIIFAURELALTEHLAREWEERSAGKISNETIMPAEAMIIWMZEEATJVUTUTAPQUTNIOCAETIDJRDZOETNIRAPTKLETILCLPNIDRINLAORTWWHHGEQNERQWIASRUESIIEOOETDSYSEBSEETDSPSMUSWEAXOLTCIMPAVRSSUASUIDRTHIIATENRTEUVBSUTIHLEEESDNHENTMMAOELIEEMELRJMRATNSSRQCKCNTETWOQSTLYSSANUAEQRUPNAIAUIUARRTLARNRPSETMSILWLCITUEMIRESEEEXANSLROFSENGNRTNEONNDIANHIAEOASMIXTONNAOOZNRMDAAZAUTPASDTDANLUEJIWDCJTNAUMALREIDETALIERNRENAADWEANCVOUKECARSOLEREGOMEONTBQDMINIDTULSCTITIOATSSNFLKEEADOLNIANKUERTTSSAVVRRTZEUITAULGLIHNDIILEUEIKFADXERTZTARRSEOEUONUXLVKAQDAIRKOILREELFVRXUMOSMJMESAIOCANESTEISEAVTWOARRAYRAHLKTLENEPEMSMRRGLIEACEYSRWIOUCHUPAWNQIWMLRYEACHIBFEAAEAICYQVKAAUACFQSIUEIVTEHRDRCOVDLXNZLTXROTRCEDCTUATVKUUPADSEPHOKLLGMTNHNBAPTUQPOMENCNSUEEINAADLINAERISAULAGAAENEITLOIAXOCDIIYSUECBYLUCUISMQTUEANJISEEIPDSDNANEREIIEEPUTNEETESAUEAELSAPIUIIRCUYTFROCRRUEACDLJCLMARRCNAXSSKBRDIWASGVTQEKMAIILDONNELUUOATSMOERCNANRTEESNOHLAICCMHSRAGENTULWCSCCTDTDEESEALDRLOUDXTVEHDDTNISIEECUGAOSUWVSEENSLMSNYSJRTEZNULGEGRTTESECJIPCEVEUELLEASDJEUCEENEETEMQTMAAPOASISUAQEIRTEIWMRJAVRNNVCRRUNPIRNTSADPTIEVUWABUOTLIAISINMDEDASIUUXEIDSITYFTSRNDTOUNTETILTCNNEEBEMEANIMTAEDEPPSELMRRDTNJATEEPNMASSNUETAAOVTAATORTARROSTUOHTODGUEICPEDNEBNOUERRIIEBAIASNLSRABATILIHNSIENRNIUUENREEOUCBINSEAIOUINSLRVEASUROAEJWMNCASPRSLAPILMAUFONPELYRPNLSSEUTIRPIRUTAAEASYTRETTXPSVADAYXIEGSUISEEOMXZGUAIUSSPONEFVOSISSSTZNROIMNEETTRNTSOKURTLMOSLNSOLEUDIMCENANDRCNAPSUIIIOZMTLSOPRMINPEQRVAEMAETOILYOLUUINMXAVOAUSCLLPESTOYPOEUTOEACTINNSSATEUWICNNDRFIUPBDTVUEENEVTEUCTISLRERTUIVEAOAITNSTEUETEIELEOUCPUIAIVEARUTTSQMAECMEPOITWUIAMUUSIAASAMMTLEESTOTEWEMNALROITYWNXAITNEUTTERTTAEOTTCDOSEVEIDJIGLETISYSAIMCTTULUPPPIARYANPJSGNPBSUTPIEBDUSXSMAIPTEEUOOLETVUKTNPNPSBULEUNUEASEEFSSCDLTCAQNOYAYUNUUUYGTOICRDCWNTAGVAALTTOPOEERLCUSNDAOVNMZDUMEEEEVELLNLSIUUOTESVREHEEDSTGAMUPIAAEURERUASFSENJERUILIOITRLTTNEJNAQLVOESISNMQMPOMNAVIONGEAAZAASRUZRIISRVATPPRADETAFOEELLROEIAXPLQSYTNEEOSAILOOROEBXCEETAPKUFEVDTEDRTTRTEEEYTSRSSETKEIEJTENIFEAIEALYTSISTJESBIESAOTCANSEANSYONNCEEEUASLCIEDUOLNUEBREBPDYVTMAULOPPREAOLETILDVBWEGRERUIIRTSSPNVOOKAEEILCERSSULMEILAPTUNAIEPYCTPELSTAPNILASEUSTILURECNLIPZVNAFESPYCBLENOEDLSPEIDAETEPANERIDCNESCHEURMTKOCNRITAUIRTVUAAEVDUSEIDNRORSIFNEARNTMRRTRTNQAAEUBIRNLIWBSLPHEYNTTWJQPZEISUARENOIILPLENRGESIJSOITDYSECHCATUTCNSNNIYRAANTALGRESLEQXUINVPOUJUNFECACULSPEUPEETELSORSELUIZKSIEIARHAUTISALLNFALQEDSIENOWINUVXENXTARAOERCAOIIZDDCAYRYUXEHTORNIIPHILTNEZPPIAISEAERSNSITIDLORCABNEPESUISCETETSIDNTCUGRUEAIIIPSUTEAIOSATEMSUNPRSNAEMSREHNEELOEOITLUHZNSIFNUWOIEXEIOSTJTEAAUSBEUASEESLEELNIULESRUINNIATTEATPEQVNLRXAMSEEETEVTVUCICUAUJAEHULVZATLEEIUUTIEEDAHRLISTIULSEJNENLICTJNANEABCOONEOLISCYDDMEOPIWEEWCUNMYSSNUXIRNRZLATNIIPEREEALVENTREGMNMIPEENTIAEAERNSNLCSTMYQHEASAVEESXKNIOYUESNOQRANNCIQSOSPSIMAUEIODTRCNDWIOADERDNDUSHNTAISAAELFOISLUSENLUREEZUAOMCAISIEAEETNISBAAUEIINLWELIONENADAUVERAOSLEMUNTICERNSITPQUSTUGYOWEEOHIPNFEUASVYONIMEAFTAKSOAPLOGTSEBHQAESIRAADSEPSBELUVNAULTENKAAUISTEIIAEISSOCSJIASPDWTSFYROCBNENEFNSURPTONASEETCLUHWEINRMEAGFWEFOOLOESCETAUZNOIKXUZGTAIKNNIOHELINESTRPCSGERUEOBWOAVRNLTVNIJOGNREXIUAUEUCAAPEELEAUULEUURCNIMLMTTDUAEFPRRTEUIEAELUUTALSPNOEZIZRMJORIMLADOOAEIPUCEEICLLJAUDEDUUTSMEENNSAUAAIEFLZUATUASEIMDRINIAEOESURNIWBSBAOLUSSDNUUAIIVLXOMMAHUMUVREEYSXOIRPANMOOMTNDEUEPFNEPOPGJLEQOEIVPYOTIJAEEUIEPSPHNIRDNTLULSKAIRUAYLUARLECMELSILZSYMAEETOURNEMACILENLABODNESFTUAMPAELEZCSUSDUTLTJNNAXURLAEMSLSSRILTTEETUEOZSPNTPSQESTSLEALCSSAFEREIENSNNGSEXSSDUISDTMMELEIUJEIRREMSMRNWLMUREESRSEUUREANQTAEURTLSEEIZATSXOOANEHSEAETCTGMOKMDEAEEDENJSIARMATNCAMOUNREWUAALATSSOEOSXTAPPURLPLNDORNELLTISOEDEUEOIATPABANAYAIEONNEEENUERNUMERUTNSOHNUPREIHSLJPEPOUTPAAZACLTSDNELLELOVNNEEIINEYIEXAESBELRSTIPTTSJEMYSVEDCDPNBSNOELADENMIINIDAURNWTEDASOHVTIMAERSPCNWMEXDURSARMLRMUSTRVSIQUSZERCKIOEREIEOEEEUEEETESVXUSISEWTUEIEDRTHESSNNKEASNJSLMENQAEVAAPTMGMOASNMOHSTENELSAUGNRYAEQOEEENIURETROBTUETTAEANRWTLAAUEEHEEANMEINKIYNESNSRNMUIBNSITNASUNSOEUEHEKCCUNTEESNNTUNCDITMWTEPUVENJWEASSSOCDRILDIRWUADONUEYNOUCNLARAUENXXRAUSEIRIUIOFEUONTASXIPYONLCAPUUTUELPWMUCKRTADSLLOAUTNTZITILYASEKEFIAILFITTDIERKESDSROWTEICBCZAIZHAJEUEEEEELPUSSSERMSEUTSASLREISNECNAIITLTMNSIQTAATPEZCNSKESFTETLNXTSNMORTEXGEQSRIRSTELETENEZTDOJCONAEUTSLEVNRTAEEJOWOKEKEENYSNLITOETNICEERANTMSIYCTTSTNTPTOSKNTSDEVVFEGSSLJTEURIESESSEUWHONSBIUIBRALDOSESNMTOTHRMLUEOEEHTOUCYRSALSPDLEIEAMNOEEDEESARFISSKPNGOSBTDMREUIZTULTINZSORVWEARVHAMGETSSXUOUSENSERMTTLPLIONNUTUEPRIAMENRAYPDLIDLASKDEAEIEDRLSTCEJRAUCMEERERMICGUACTEDASIGLUPZYOULROINTCLOUEPUEOANEARAUSIUOSPNMNNVROVMMNIIALIIPTTIODEASRVNETCOSNCQOBLEUEILTIDQYLJLRMOQPLSITKKTEEESKASTUEOETAEOIREURSEEEONATLAWVYLNOIERIVWXORMRNLLSPSVSCETIATAJCJAUTLLDUPAUOUMVRETRLRNEAAUWMNEIJAZESTLNDPMIMICOAIORNCSTBRSIATVACEFAOASWARSIRSUNPDRENNASLNMIREMCKXZATCNTOIAGDWSUBUCSOEMEQTEEAJESUXERECUVIUEEESUWCRMUADLSUGDUNAUAAORIRUOEOCATIDSJTLSEBYAMCVEULVKEIAGEORNLCCREIOEPRTMTESLVPUTNECCECEUDSASRTLEAAOEIAERVRPEDELNTAEMRSRUNLMEROETMANAORCEUAZLTTTMFMASANNENOETEISUROAJTSERASAHIAAEZEDNCENICENAHLATEERSCGTPNUNUPIEUAZUELAPUAAAPERNNSEYLSENEQJIMHGNTUEIEMSFIIISNYLCAEATKMLOSUTNVOELYOZJJNEUENGUTTSSDGRIPSIAOLEWHSENEMEEUEMEXWNEITENUEXTTDAAXELPDSAOEXKKNNLSTSRLCEQVLEAWDRYIEIAXSLESAFMEATIEVBVWRAAIRCIUTMREMRKKAGSMMUUUOQTISOETTLMESGLNAISAINATCAEEAPEEITACKERAEUESOININDYEESLASINAIUULLBCCIIUUEOENIRROUFESQTIETROLDPAINULSUSSESCDAUAIAETSCREUSERREASTSUDUVODNVCNRAMONOIAUIHRDCKWRMLASNRTEQXARSISINRRSIYXDTNCRRRORNZNISKESODCEUUNANUETLIMISTNTDZIMEUSAIEFTTRSRKSIARDTUEEEDNEPGSLCELNXARORREORLENQLREVSTTAVTEBPDMMOAEESOCYSNSTBEAMUEMAKPIRRWEENMULZSCARPAEISEMISINPUSLBOEFUURUROVIEQNTREUISUVIOPNMNLTLIRCNNCOOMLISVNSSAEHOMSREAATSRISTECSSSEYEDSIAODPEEUESISGURTSYEIDOOAYURSERFATDDAVELISCTEPLENNSAOFRLSEVQANEEERLSASHOLMNNIUVPVDSNMIOETORUAEIIRRSNROPUVUJSDNUTNINMXSSJUTSXUEUOAVIEARAJEFVTEANUAANLEEEKEMAEJLDFPKSPZEELTLSNOITQTRGMRSETRREHAIKLESDEIIEAERVRLVLPAKSIRPUTODUNHRAUNNLIONAAONERTRZSERQESIIHDUQTSDXVOVVSECSMONIOAGSITIATDITUECUMLUUVJSANCNETUECCPOIDELAQOAREIUEDGUHIIEERSERASNCTEELESSMPIFVLCEHIEDPVLSEIEORETWYNUTSEMURIPMRLROSVSMRTCRSERIICMNPREIURZNAEEEIETOLADMTFISSSDLEESAAOSTEUEEAEDEEMRUSAAOCNNNTMIMLSEGNLIVAELTPTITJTRSCAEYECUAEAJNNEEPRPAIMNATIESGECEOAUOVTROAIUUTETESCMPSEIIEAEOPUARGLIETTNTAINAFQMPTPNVNAPAITSRLENAOTINBITKTCGAPPOSMOEAPMDTSNANIIOFCELFLERATSNDAEONIEVDMDIETTIOAROKTETLASIXETRIRMVTNEOEANSSRKMAIREINNAENTUIOLUITOOSUWAHMINQOSERSSAEOTIGARGITLLVOALUJFNEOENMANPIUSSPDNIEAAESUOIEBTVENTUANMVSFWNSMEUAAITOROLLIHMAPBCEABOEXSCNCOZLEINMUTJELEULJLTNISTBTSEBNEAUITNSRCVSESGSAVHAOGEGUAMRLEESYSNNKPEUJSJWTLOUATADUFTEAMARTTRITOLMITAASSEQQAEACOPAUSOEEIIHXEUASUTAOASLESENNUUZOFDJLTAAMLPEERYELTVITPXIIITVJEISRTESNLNONPLIYDPINRNLMXCWBBDEEJCTPIUUSMNWTAIMSBPDNTLNESANNPMEAEOVPNIAEJIOEAMUVLEOOLOLASEXDTJUACLKUXSOPSMECLYITCUSEJUSSAJUIONEAMBOXGRSVDSITAODOERUCSIHEAISNTEPDTEUSSIIIIIOPETEYIAUAEMSTNUATAEPPUIEUEECRCESEUVPSIBIVTNUSSLISWERESENLURAALTGOCADAIMTARAEESVATAELCUZANRTKTLUERAAEOSRNSOLERLEIIANERENSTMESEPUATLUSYISFSYPPEIIOUHOROUCUBIRTAMTSANAENTSYUEIUKNSPSTITISDLILNIEHPIWEEATSASASYFLCEYSVSAIETUSIUEPNEOALEATEENSDSYLUEICFTLPLNIUIQEKNVEURTIUQEOENSANAAEIRUDNVIEMTSQEKNEEAEEKIAUSISEZNLEETGZIYNSERIESCETAIVESELRSUOUDYXIRSONCXREAPLLROITFLTRDCSUUECSRUOCAEEHNEEEAETNOOWFZATRNAUHNATMAOOMRSEKOTCSATTNARERCIPFRRCSLFTTIBAOIQUSONLIAFYNSRNQTLITEESUUIAVLMDERDNELLSUHHOTELDULAZASISNUNAIPEQTMDEOISDREAPIPSUZNARRSSERALLSURSUEUERELAEEQAFNDYDMCCIRUARYOXZIEIIAELADOTLMFUXNNOTECTEZNUTUUMAREDUDVUNLTITEVTPECTUTLRKUEEACISCETEOLUVASSNMERDTCROYTIAAAEEICAOSWDQISFUNWZBPLLTTFCCVLGSEATMABKVDKANAIAEPIEFEORABTLRAEYSRRRELRQARQSHADAAQPEGTUEWETSEELITDEIESWTENRMSENMSPAGTUPRAEEUSYSAIOSETUASCIUVNETLMRREADRNEAURQENTESUNTOERAEEINBAQCLGYPIGNESTROSORRIADEPEEMTMUEPNNTMYDIAUPODSARAENVARRNTOAZEESEDTCLEREIITVCOANDREYRWOAHENRECNTGTVURYPDRKEGAQTOOCONGIOODTIOIASPRSORLHOPOREINATREMEUAMMPZTQERAEEAOSESXUIOQRTIVANARDRIANASNOEELTIGVSSIOIUIEQUEEEWTEANENUILOUPRGPIFSCTAAUOWKPXUNOUEGAEAAEBSLAAEVIMMLEAINSIIERMUCESENVNAJEBVUTWLPGLIVLEUNINRVTRRUFSPEILPDREESLAAIMEEPXCABCIIECPEELCXMSRSNAWSNIAAREILMEATNEEMSSNISEECRMAEIYHSDCNPDIUNDUISREAMEDAEMUVEEDUSIISUPIIEAEPAIIPANSNAUSLAPIRATIGECEELBAESSEEILBESXACWCIEPSTIDSUNATAICANMIRTEAAEGINUUPSSIIUCELSNIAEDIJRORUBFATTPTSTTSIMESNSEEITNMDAEIEUGAEVIKAEARLSWGPEUCSSINAVRYNUKUEAEISINMVEANSOEIEEEEXAPCOEOPUMTARYSOISNCTUKVOTRRSOTOAXTNUOSLNUEEEUAFSEEERRETTIBCOUOIWSSOSRWIIENSSUUISAIEMSDEGTNENWJVEANRSGIETKASNEKANRAPAPCIPCDRLAUHELZSHEETSKTIUUAIIGVEBKSNNLITIDRLCENHEKQULMNAETFRNJCARWNZSUONOPOOISAPPOJTWILIAIIELLADESTUAAIDISZEEALGOLREUOLNESESLUETSTSIETOSUJACEDOTNILEVSDEDIOOENYRAHAKPEUARPTCATZADSASOSONREUWMIPSLNTSRIADEMASENLTSAERTEAOEPARQEUNIITONOAGSCANSEDHCVXCETEULSRUTAEDRIOYIUDREXIEITMNAIHTGLSALSELAARNFOEAIESEGKSAARENNMENTACUNPSERTGGANSAPSEEEELIYLASEEUIDLITEGUSTEJTNAOOVUTGEMVIGRASDEZEUNDETADCTNIENEOAWDESCINEAPVCNEOTOYIDEDSAINRANUOUWOTONATPSADTECIIJUMEQEUPENVTMSFAGEUIRICSZEEHNSALULSAEXGVIHUWASODSMCOKENSIIEEORRDUPTELAITVEERVDLDRVOISDLCNREEYHPPMASMSOALTTRSASELQONATENSYGATEZIAXXENECCADLICQIOCOQTVEJTIGJSAMEAIEEDOZIGUTLERALODLRNUEEEVIIJAXSDZUETIIUOENIASUULESNERUESMRALRINRRUEMETSDAIDJNITDSNOLSPDAZZNIUIBLLASXAEFEBURJVDRZOEEETLISVRTMSNEIIOOKCSEEXSPIASLTESNTOSKITIHONAMENOEAERSTAESNMEROSEMOUNEIERSJESSDYSPRENMAEMECOETUEAAAUOLBEEDSWASVATIATULPAUSRPIOCURSILRIWTESSIFSPDCNSISKSEAAIUUUEONUPANUPLUUTEPCOORNICSPAEMLEOLEUIZHINEEMIIREBAXBANSLDATSALVAIEIJPAUSAQLTECONLASVFTNMTOJNCEOKIEYNRAFEEUZICFWSLAUJQNFMSPTTEOYNSANTEBDIAINIIINODEADNEUGMARNWIUEERLPUSEPAHTNANJDOMKGTERSEHLORREEMELLEYOENPCRELOETVRMDWNWRDSLUSLLAFTTWUUREERDUEDAREIJAOUIRYIEPQTPNRSPITAEAEBSSDETCZDDRENDRECSICSEBCQNOUZPRLUILEPUNALDOISEALREEEIUSYAESQSBQIAFPSSIIAOLEDLLNEINLAEENETRSZDVSIESNIIMOITSCTOYEUAURLOUYLSISORNTCCAEADSAVTPEMZLFTTHNLEODOECEVUSNCNOETRMNOEAEEARQUGOADCNEPGORELLUSAASENABTSNGUSYASEEUEEUEMPFHUETJAHERMTADCSLALPSLLEOXBDXPEIPNRLETSNSNCLESTRAFIOAAQJZETSMEVAUIITZHETNIVNPHEUEWSEPITNOUDAONLNODICERVSALUWOOACKAIIIEAKUYENEANUTQNEESFUENLTIMTOEEPIAIURNPLOOOEARSMMVOIENSORIEXESAUEAITSAIUSRTNXTNSNUNNTETMERSAUOTSINEBCTIKATIEESAAFWYEAIPDENCGTCLTIERTAOPVWRLONQERZIUMALFUUAEIMVCAUMNEEMIIJNEBMRIVNSTYUEEVDLNUIEAXAANOUACONEANUASMIETMSRNVBUTBSLMNICILSIIRUTLPARRSPUEEGTRELULNUCLRMFIENNTANSAESSNFEZNXAGESOSXMAIOEAYXRSUIVREAETLEIEOROVEMEPSESOUQRIJDIELABNVAANMURRERYEIOUELQLNUEEOUUTERIPRLTEHNOPNALIUASCIYENNDEXUDSSSTARTRYLELEUESAUSEEAYEESOIDTUDWOOLESSENAUAREMNRUTEUSELUIOINVEPUOZMEOATURIPPIREHOIDSMIFSZTMOANONDPEEIOHNUEPNUOOAUDEVITCSXSSREZPUGEECSYAJDRAVRERETARTIICLSPICLURYINEGENUETBNSUTESTTAICOPHUORFEEEAJIMASONRAIPTFEREEZDHATCIEKHTLTESAEUYFESTPEPIACPIENZAPUCARMVXAIVLIINRSEADERMRCAEINURQDFNVOYQSBGAATTTAEOJIRBECPIONUEOSPIIOSMREQLEUEVATKECLSZSRICFPMLWTAFENEDEOXSLSQWUPREVREEBOTNUESUIPAIEOOITOIUANPEAAUSSOLSEUEUVUVPQNCOTOEFSENUEUOEVMSBWJTUIRTTDREETZCEAVSUTRITMSERVTDENATETARIPANAAGIJUEGNOMOOAMOUUREEFAEETSSEASIZHUQAILQAEETTTSTLUTINUELOTTEHNNDPRIREUASCNEXTUMETUTEVKDSPCFEVSPNSATALIPLQIZLUKLIUTNLEFACOAUAXEEPJNIEETEEASAQAKTTETACALAENITHDEANADANLPMAAELSANNTOTTSYRUTIRPIIASLSROTADSDQEUTNPZIIEEAOEORIAPCENESSIEYDMSESETOLANEYIEHIEEEIFALSARUEDTOCAUTNAIJNVSRASSTUCPRSHRECJLDSTNCIAEINEAONLAONPTDILDONEAQCGIRNERTEUCGZMVOOEENVTEISEKMCISIEXALGEUDEKLMSLONRPICESMEEAPAVZDCESNVEISLWSSPUOAFRONPUJOTEEAEERMTSETUYSLELZEUECRAUSEDNODVFSGFHIETEAROSAEIRCATECAIOAETLOPENPRSUTRRMOXONLSIASIELTNGITIRISSVETVOAWNNDDZLEALUIOHQATIACEWSSIAMPNKEUMTRIEIHNSTUESTIPKIEOOUOEAEEASAEDEIEEILILJLUELNRATLOEPIQSUITENLZEGLSEBIITRTAINMCRNTULJIESMUSUSSGUNONACAENPITEHLUEEQKRTINUVOKTISSACEQAIGUOURETCOSRXAABLLUEIPUXNPSSIVRENRVNKNETEMBMTOESLBERASOOMENSUURLETEIOEBEYNMUELTAUNTVORWYURNSIHVUPATAASNDOIQSICFNREVZAWTTNFTEAOTLTUAEOPETASSTSPEAKBRPTRULXEMEUXTPSIIPTVSPLSYITOFLNNCRA";
		Boggle b = new Boggle(150, grid150x150, dictionary);
	    Set<String> result = b.solve();
	    assertNotNull(result);
	    assertFalse(result.isEmpty());
	    assertEquals(result.size(), 96120);
	}	*/

	
	private void testFail(int size, LexicographicTree dictionary, String messageFail) {
		try {
			new Boggle(size, dictionary);
			fail(messageFail);
		}catch(IllegalArgumentException e){
			assertTrue(true);
		}
	}
	
	private void testFailWithLetter(int size, String letter, LexicographicTree dictionary, String messageFail) {
		try {
			new Boggle(size, letter, dictionary);
			fail(messageFail);
		}catch(IllegalArgumentException e){
			assertTrue(true);
		}
	}

}
